"--> Running asgn2.test.01 (GET a small binary file (with __-- in the name)) ... SUCCESS!
--> Running asgn2.test.02 (GET a large binary file) ... SUCCESS!
--> Running asgn2.test.03 (PUT a small binary file) ... SUCCESS!
--> Running asgn2.test.04 (PUT a large binary file) ... SUCCESS!
--> Running asgn2.test.05 (Test HEAD request for a proper response header with 200 (OK)) ... SUCCESS!
--> Running asgn2.test.06 (Test for 400 with a bad HTTP version (HTTP 1.0)) ... SUCCESS!
--> Running asgn2.test.07 (Test if server creates default number of threads) ... SUCCESS!
--> Running asgn2.test.08 (Test if server can read optional arguments in any order (examples from spec)) ... SUCCESS!
--> Running asgn2.test.09 (Test if server can handle multiple GET requests simultaneously) ... SUCCESS!
--> Running asgn2.test.10 (Test if server can handle a GET, HEAD, and PUT request simultaneously) ... SUCCESS!
--> Running asgn2.test.11 (Test if server can handle many requests greater than number of threads) ... SUCCESS!
--> Running asgn2.test.12 (Test if server can log a single valid request) ... SUCCESS!
--> Running asgn2.test.13 (Test if server truncates log files everytime it starts) ... SUCCESS!
--> Running asgn2.test.14 (Test if server can log many valid requests sent simultaneously) ... SUCCESS!
--> Running asgn2.test.15 (Test if server can log many valid and invalid requests (400) with multiple requests sent) ... failure!
++++ First 200 characters of standard error for test asgn2.test.15 are: ++++
Ncat: Ncat: Connection reset by peer.
Connection reset by peer.
Ncat: Idle timeout expired (2000 ms).
bash: line 29: 17314 Segmentation fault      (core dumped) ./httpserver 8015 -l test15-req.log
dif
++++ end ++++
---- Test feedback ----
Start the server with logging enabled (-l <log-file>). Create 3 large files (> 32 KiB), 2 with valid server-side names. Create a correctly formatted log entry using printf to create the header for the request line and redirect that to a <log-entry> file. As for creating the body simply append (>>) the output of hexdump hexdump -e '1/0 "%08_ad" 20/1 " %02x" 1/0 "\n"' <file-name> to the <log-entry>. If the size of the file is not a multiple of 20 then hexdump will create extra whitespace characters, truncate those. Do this step for every request sent. Create 3 log entries for the invalid requests using printf for a long resource name, a bad method, and an invalid character in the resource name. Send 2 GET requests and 1 PUT (-T) request using curl as well as 3 invalid requests using printf to format the request piped ( | ) into ncat. Run the curl commands with the -o option to save their output to a file and use the & operator to run each command in parallel. Use the keyword wait so that the script waits until all requests running in the background (&) are done. After all contents of the files are logged use csplit to split up the entries in the log. Use the arguments --elide-empty-files <log-file> "/=/+1" "{*}". Verify the correctness with diff by comparing each output file to the <log-entry>'s created with hexdump and printf.
---- end ----
--> Running asgn2.test.16 (Test if server can log many valid and invalid requests (400 and 404) with multiple requests sent) ... failure!
++++ First 200 characters of standard error for test asgn2.test.16 are: ++++
Ncat: Ncat: Idle timeout expired (2000 ms).
Idle timeout expired (2000 ms).
bash: line 28: 17354 Terminated              ./httpserver 8016 -N 2 -l test16-req.log
diff: _testtmp/test-16-req-03.log: No 
++++ end ++++
---- Test feedback ----
Start the server with logging enabled (-l <log-file>) and 2 threads (-N 2). Create 2 large files (> 32 KiB), 1 with a valid server-side name. Create a correctly formatted log entry using printf to create the header for the request line and redirect that to a <log-entry> file. As for creating the body simply append (>>) the output of hexdump hexdump -e '1/0 "%08_ad" 20/1 " %02x" 1/0 "\n"' <file-name> to the <log-entry>. If the size of the file is not a multiple of 20 then hexdump will create extra whitespace characters, truncate those. Do this step for every request sent. Create 2 log entries for the invalid requests using printf for a bad method, and a non-existent file. Send 1 GET request and 1 PUT (-T) request using curl as well as 2 invalid requests using printf to format the request piped ( | ) into ncat. The ncat requests consist of an invalid method and a non existent file. Run the curl commands with the -o option to save their output to a file and use the & operator to run each command (including ncat) in parallel. Use the keyword wait so that the script waits until all requests running in the background (&) are done. After all contents of the files are logged use csplit to split up the entries in the log. Use the arguments --elide-empty-files <log-file> "/=/+1" "{*}". Verify the correctness with diff by comparing each output file to the <log-entry>'s created with hexdump and printf.
---- end ----
--> Running asgn2.test.17 (GET request to 'healthcheck' with no logging enabled (404 error)) ... SUCCESS!
--> Running asgn2.test.18 (GET request to 'healthcheck' with logging enabled) ... SUCCESS!
--> Running asgn2.test.19 (Test 403 error for a request to 'healthcheck' ) ... SUCCESS!
--> Running asgn2.test.20 (Test logging of many valid and invalid requests including a request to 'healthcheck' ) ... failure!
++++ First 200 characters of standard error for test asgn2.test.20 are: ++++
Ncat: Idle timeout expired (2000 ms).
Ncat: Idle timeout expired (2000 ms).
bash: line 43: 17421 Terminated              ./httpserver 8020 -N 2 -l test20-req.log
diff: _testtmp/test-20-req-06.log: No 
++++ end ++++
---- Test feedback ----
Start the server with logging enabled (-l <log-file>) and 2 threads (-N 2). Create 2 large binary files (> 32 KiB).  Create 1 empty file with a valid server side name using touch. Create a correctly formatted log entry using printf to create the header for the request line and redirect that to a <log-entry> file. As for creating the body simply append (>>) the output of hexdump hexdump -e '1/0 "%08_ad" 20/1 " %02x" 1/0 "\n"' <file-name> to the <log-entry>. If the size of the file is not a multiple of 20 then hexdump will create extra whitespace characters, truncate those. Do this step for every request sent (includeing a request to healthcheck which should have 32 0a 35 as the body logged). Create 2 log entries for the invalid requests using printf for a bad method, and a HEAD request to healthcheck (403). Send 1 HEAD (-I) request and 2 PUT (-T) requests using curl as well as 2 invalid requests using printf to format the request piped ( | ) into ncat. The ncat requests consist of an invalid method and a HEAD request to healthcheck. Use the & operator to run each command (including ncat) in parallel. Use the keyword wait so that the script waits until all requests running in the background (&) are done. After all commands have finished, send a GET request to healthcheck (2\n5 body) using curl. After all contents of the files are logged use csplit to split up the entries in the log. Use the arguments --elide-empty-files <log-file> "/=/+1" "{*}". Verify the correctness with diff by comparing each output file to the <log-entry>'s created with hexdump and printf.
---- end ----
--> Running asgn2.test.21 (Test 403 error (PUT) for a request to 'healthcheck' ) ... SUCCESS!
--> Running asgn2.test.22 (Test 'healthcheck' value with only valid requests) ... SUCCESS!
--> Running asgn2.test.23 (Test 'healthcheck' value with only invalid requests) ... failure!
++++ First 200 characters of standard error for test asgn2.test.23 are: ++++
bash: line 19: 17547 Terminated              ./httpserver 8023 -l log.log

++++ end ++++
---- Test feedback ----
Start the server with logging enabled (-l <log-file>). Create a file with no read permissions using chmod -r. Create an empty file using touch. Create the contents of a correctly formatted healthcheck file (5\n5) using printf redirected (>) to a <hc-file>. Send a HEAD (-I) request for the file without read permissions, and  1 PUT (-T) request to healthcheck (404 errors).  Send 2 GET requests using curl; 1 request has a bad http version (--http1.0 option) and another has a bad resource name (400 errors). Send one GET request to a file that does not exist using curl (404 error). Use the & operator to run each request in parallel. Use the keyword wait so that the script waits until all requests running in the background (&) are done. After all commands have finished, send a GET request to healthcheck using curl. Verify that the response is 5\n5 with diff on the output from curl and <hc-file>.
---- end ----
--> Running asgn2.test.24 (Test 'healthcheck' value with many valid requests) ... SUCCESS!
--> Running asgn2.test.25 (Test if a single GET request to 'healthcheck' is logged correctly) ... failure!
++++ First 200 characters of standard error for test asgn2.test.25 are: ++++
bash: line 13: 17693 Terminated              ./httpserver 8025 -l test25-req.log
diff: _testtmp/test-25-req-02.log: No such file or directory

++++ end ++++
---- Test feedback ----
Start the server with logging enabled (-l <log-file>). Create a small text file with a valid server-side name. Create a correctly formatted log entry using printf to create the header for the request line and redirect that to a <log-entry> file. The body of the a request to healthcheck should have 31 0a 32 as the body logged. Send 1 valid HEAD (-I) request and 1 invalid HEAD (-I) request using curl and use the & operator to run each command in parallel. The invalid request is for a file that does not exist. Use the keyword wait so that the script waits until all requests running in the background (&) are done. After all commands have finished, send a GET request to healthcheck (1\n2 body) using curl. After all contents of the files are logged use csplit to split up the entries in the log. Use the arguments --elide-empty-files <log-file> "/=/+1" "{*}". Verify the correctness with diff by comparing each output file to the <log-entry> created with printf.
---- end ----
--> Running asgn2.test.26 (Test if a single HEAD request is logged correctly) ... failure!
++++ First 200 characters of standard error for test asgn2.test.26 are: ++++
bash: line 8: 17713 Terminated              ./httpserver 8026 -l test26-req.log

++++ end ++++
---- Test feedback ----
Start the server with logging enabled (-l <log-file>). Create 1 large binary file of size 4096 with a valid server-side name. Create a correctly formatted log entry using printf to create the header for the request line and redirect that to a <log-entry> file. Send 1 HEAD (-I) request using curl. After all contents of the request are logged verify the correctness with diff by comparing the <log-file> to the <log-entry> created with printf.
---- end ----
--> Running asgn2.test.27 (Test if server can handle multiple GET requests to the same resource simultaniously) ... SUCCESS!
--> Running asgn2.test.28 (Test if server can handle multiple requests much larger (15:1 ratio) than the number of threads) ... SUCCESS!
"
