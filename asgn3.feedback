"--> Running asgn3.test.01 (Test if loadbalancer can GET a small file.) ... SUCCESS!
--> Running asgn3.test.02 (Test if loadbalancer can GET a large file.) ... SUCCESS!
--> Running asgn3.test.03 (Test if loadbalancer can PUT a small file.) ... SUCCESS!
--> Running asgn3.test.04 (Test if loadbalancer can PUT a large file.) ... SUCCESS!
--> Running asgn3.test.05 (Test if loadbalancer can process a HEAD request.) ... SUCCESS!
--> Running asgn3.test.06 (Test if loadbalancer can handle concurrent GET/HEAD/PUT (different resource).) ... failure!
++++ First 200 characters of standard error for test asgn3.test.06 are: ++++
bash: line 17: 15140 Terminated              ./httpserver -L 8106 &> /dev/null
bash: line 17: 15141 Terminated              ./httpserver -L 8206 &> /dev/null
bash: line 17: 17888 Terminated           
++++ end ++++
---- Test feedback ----
Create 3 different files, 2 with a valid server side names. Start two httpserver instances each with equal load (error count and total number of requests). Start the loadbalancer (-N 6). Send 1 GET and 1 HEAD (-I) request to different server-side files using curl. Send 1 PUT request using curl with the -T option, specifying the other file created. Run these commands in parallel using &, and save their output using the -o <output-file> option. Use the keyword wait so that the script waits for all commands running in the background (&) to finish. Verify the output from each request with diff by comparing it to the original file. The response from the HEAD request should have the correct Content-Length corresponding to the size of the file requested.
---- end ----
--> Running asgn3.test.07 (Test if loadbalancer can handle concurrent GET/HEAD (same resource).) ... failure!
++++ First 200 characters of standard error for test asgn3.test.07 are: ++++
bash: line 18: 31670 Terminated              ./httpserver -L 8107 &> /dev/null
bash: line 18: 31672 Terminated              ./httpserver -L 8207 &> /dev/null
bash: line 18:  2051 Terminated           
++++ end ++++
---- Test feedback ----
Create 1 file with a valid server side name. Start two httpserver instances each with equal load (error count and total number of requests), and then start the loadbalancer (-N 6). Send 3 GET and 3 HEAD (-I) request to the same server-side file using curl. Run these commands in parallel using &, and save their output using the -o <output-file> option. Use the keyword wait so that the script waits for all commands running in the background (&) to finish. Verify the output from each request with diff by comparing it to the original file. The response from the HEAD requests should have the correct Content-Length corresponding to the size of the file requested.
---- end ----
--> Running asgn3.test.08 (Test if loadbalancer can handle a 400 error.) ... SUCCESS!
--> Running asgn3.test.09 (Test if loadbalancer can handle a 404 error.) ... SUCCESS!
--> Running asgn3.test.10 (Test if loadbalancer can handle concurrent 400 and 404 requests.) ... failure!
++++ First 200 characters of standard error for test asgn3.test.10 are: ++++
bash: line 16:  5736 Terminated              ./httpserver -L 8110 &> /dev/null
bash: line 16:  5738 Terminated              ./httpserver -L 8210 &> /dev/null
bash: line 16:  8516 Terminated           
++++ end ++++
---- Test feedback ----
Start two httpserver instances each with equal load (error count and total number of requests), and then the loadbalancer (-N 3). Send 3 GET requests with curl. One with a bad name, one with  to different server-side files using curl. Send 1 PUT request using curl with the -T option, specifying the other file created. Run these commands in parallel using &, and save their output using the -o <output-file> option. Use the keyword wait so that the script waits for all commands running in the background (&) to finish. Verify the output from each request with diff by comparing it to the original file. The response from the HEAD request should have the correct Content-Length corresponding to the size of the file requested.
---- end ----
--> Running asgn3.test.11 (Test if loadbalancer can forward a GET request to the least loaded server (2 servers have the same load)) ... failure!
++++ First 200 characters of standard error for test asgn3.test.11 are: ++++
bash: line 21: 16673 Terminated              ./httpserver 8111 -L -e 2 -t 100 &> /dev/null
bash: line 21: 16675 Terminated              ./httpserver 8211 -L -e 2 -t 100 &> /dev/null
bash: line 21: 193
++++ end ++++
---- Test feedback ----
Start two httpserver instances each with equal load (error count and total number of requests), and a third httpserver in a different directory with zero load. Create a small text file with a valid server side name in that directory. Start the loadbalancer (-R 1). Send a small request (HEAD) to the load balancer to trigger a healthcheck probe. Send a GET request using curl to the loadbalancer for the file in the third server's directory. Save the output to a file using the -o option. Verify that the contents of the output file match the contents of the small text file in the third server's directory.
---- end ----
--> Running asgn3.test.12 (Test if loadbalancer can forward a PUT request to the least loaded server (2 servers have the same load)) ... failure!
++++ First 200 characters of standard error for test asgn3.test.12 are: ++++
bash: line 20:   948 Terminated              ./httpserver 8112 -L -e 2 -t 100 &> /dev/null
bash: line 20:   950 Terminated              ./httpserver 8212 -L -e 2 -t 100 &> /dev/null
bash: line 20:  38
++++ end ++++
---- Test feedback ----
Start two httpserver instances each with equal load (error count and total number of requests), and a third httpserver in a different directory with zero load. Create a small text file. Start the loadbalancer (-R 1). Send a small request (HEAD) to the load balancer to trigger a healthcheck probe. Send a PUT request using curl (-T) to the loadbalancer. Verify that file was sent to the least loaded server by checking if that file was created in the directory of the third server. The contents of the server side file in the third server's directory should match the contents of the small text file. 
---- end ----
--> Running asgn3.test.13 (Test if loadbalacer can forward traffic to the least loaded server (each server has a different load)) ... failure!
++++ First 200 characters of standard error for test asgn3.test.13 are: ++++
bash: line 22: 23157 Terminated              ./httpserver 8113 -L -e 15 -t 200 &> /dev/null
bash: line 22: 23158 Terminated              ./httpserver 8213 -L -e 20 -t 100 &> /dev/null
bash: line 22: 2
++++ end ++++
---- Test feedback ----
Start 3 httpserver instances each with different loads load (error count and total number of requests). Start the least loaded httpserver in a different working directory. Create a small text file in the directory of the least loaded server with a valid server side name. Start the loadbalancer (-R 3). Send 3 HEAD (-I) requests using curl (400, 403, and 404 erros) to the load balancer. This should trigger a healthcheck probe from the load balancer. After that, send a GET request for the text file to the load balancer. Save the output using curl's -o option. Verify that file was sent to the least loaded server by checking that if that file was created in the directory of the third server. The contents of the server side file in the third server's directory should match the contents of the small text file.
---- end ----
--> Running asgn3.test.14 (Test if loadblancer can forward traffic to the least loaded server (many servers have the same load)) ... SUCCESS!
--> Running asgn3.test.15 (Test if loadbalancer can handle concurrent connections from multiple clients) ... failure!
++++ First 200 characters of standard error for test asgn3.test.15 are: ++++
bash: line 25: 24600 Terminated              ./httpserver 8215 -L -e 3 -t 200 &> /dev/null
bash: line 25: 24602 Terminated              ./httpserver 8315 -L -e 3 -t 200 &> /dev/null
bash: line 25: 274
++++ end ++++
---- Test feedback ----
Start 3 httpserver instances (3 groups). One server has the least load (error count and total number of requests). Start the least loaded httpserver in a different working directory. 3The two other server instances have different loads. Create two small text files in the directory of the least loaded server with a valid server side names. An another small binary file intended to be sent. Start the loadbalancer (-R 1). Send a small request (HEAD) using curl to the loadbalalncer to trigger a healthcheck probe. After that, send 2 GET requests, one for each of the text files to the load balancer. Also send a PUT request to the loadbalancer using curl (-T) with the contents being the small binary file. Save the output using curl's -o option. Run these commands in parallel using &, and save their output using the -o <output-file> option. Use the keyword wait so that the script waits for all commands running in the background (&) to finish.  Verify that output files match the contents of the small text files in the least loaded servers working directory as well as the binary file (that shoudl have been created in the directory as well).
---- end ----
--> Running asgn3.test.16 (Test if loadbalancer can detect a single server going down) ... SUCCESS!
--> Running asgn3.test.17 (Test if loadbalancer can detect multiple servers going down) ... failure!
++++ First 200 characters of standard error for test asgn3.test.17 are: ++++
bash: line 21: 32660 Killed                  ./httpserver 8117 -L -e 1 -t 2 &> /dev/null
bash: line 21: 32661 Killed                  ./httpserver 8217 -L -e 6 -t 100 &> /dev/null
bash: line 28:  3047
++++ end ++++
---- Test feedback ----
Start 3 httpserver instances, each with a different load (error count and total number of requests). Start the server with the highest load in a different working directory. Create a small binary file. Start the loadbalancer (-R 1). Send a small request (HEAD) using curl to the loadbalalncer to trigger a healthcheck probe. After that, kill the two server processes with the least load. Send another small request (HEAD) using curl to trigger a second health check probe. Then, send a PUT request using curl to the loadbalancer with the small binary file as the source target. Verify that the file in the directory of the server that had the highest load, and that it match the contents of the small binary file.
---- end ----
--> Running asgn3.test.18 (Test if loadblancer can detect if all servers are down initially (500 error)) ... SUCCESS!
--> Running asgn3.test.19 (Test if loadbalancer can detect if all servers are non-responsive (500 error)) ... timed out after 15.00 seconds ... failure!
---- Test feedback ----
Start 3 instances of ncat as servers (ncat -lp <port>). Start the loadbalancer (-R 1). Wait for loadbalancer to send it's inital healthcheck probe. The loadbalancer should timeout on each request. Restart the ncat instances (presumably dead) since the processes terminate after the connection is closed. Send a GET request to a file that does not exist using curl. Save the response code using the --write-out "%{http_code}" option to a file. Verify that the response code is 500 using grep.
---- end ----
--> Running asgn3.test.20 (Test if loadbalancer can detect a server going down and coming back up) ... failure!
++++ First 200 characters of standard error for test asgn3.test.20 are: ++++
bash: line 19: 16825 Killed                  ./httpserver 8320 -L -e 69 -t 420 &> /dev/null
bash: line 34: 19680 Terminated              ./loadbalancer 8020 8120 8220 8320 -R 1
bash: line 34: 18127 Te
++++ end ++++
---- Test feedback ----
Start 3 httpserver instances. One server has the highest load (error count and total number of requests). The two other server instances have much lower loads and are different. Start these httpservers in a different working directory. Create a small text file. Start the loadbalancer (-R 1). Send a small request (HEAD) using curl to the loadbalalncer to trigger a healthcheck probe. After that, kill the server process with the highest load. Send another small request (HEAD) using curl to trigger a second health check probe. Send a PUT request using curl to the loadbalancer with the small text file as the source target. The file should now be in the directory with the two other servers. Start another server instance, except with zero load. Send another small request (HEAD) using curl to trigger a second health check probe. Create a small text file with the same file name as the one in the directory with the other servers, but with different contents. Send a GET request to the loadbalancer using curl for that specific file and save the output using the -o  option. Verify that the output file matches the second text file that was created (different than the version in the directory than the other two servers).
---- end ----
--> Running asgn3.test.21 (Test if loadbalancer can detect invalid healthcheck responses (status code != 200)) ... failure!
++++ First 200 characters of standard error for test asgn3.test.21 are: ++++
bash: line 18: 29257 Terminated              ./httpserver 8121 &> /dev/null
bash: line 19: 32000 Terminated              ./loadbalancer 8021 8121 8221 -R 1

++++ end ++++
---- Test feedback ----
Start 2 httpserver instances. Start on server without logging enabled (no -L). The non-logging server returns 404 responses to GET requests for healthcheck. Start the httpservers instance with logging enabled in a different working directory. Create a small text file in that directory. Start the loadbalancer (-R 1). Send a small request (HEAD) using curl to the loadbalalncer to trigger a healthcheck probe. After that, send a GET request to the loadbalancer using curl for the small text file and save the output using the -o  option. Verify that the output file matches the text file in the directory of the logging server.
---- end ----
--> Running asgn3.test.22 (Test if loadbalancer can handle concurrent connections from multiple clients (loadbalancer.N > sum(servers.N))) ... failure!
++++ First 200 characters of standard error for test asgn3.test.22 are: ++++
bash: line 16: 18998 Terminated              ./httpserver 8122 -L -e 10 -t 5000 &> /dev/null
bash: line 16: 21769 Terminated              ./loadbalancer -N 20 8022 8122 8222 8322 -R 4
bash: line 17: 1
++++ end ++++
---- Test feedback ----
Start 3 httpserver instances. One server has the least load (error count and total number of requests). Start the least loaded httpserver in a different working directory. The two other server instances have different loads. Create 20 small files, each with a different size in the directory of the least loaded server with a valid server side names. Start the loadbalancer (-R 4 -N 20). After that, send 20 GET requests, one for each of the files created to the load balancer. Run these commands in parallel using &, and save their output using the -o <output-file> option. Use the keyword wait so that the script waits for all commands running in the background (&) to finish. Verify that output files match the contents of the small files created.
---- end ----
--> Running asgn3.test.23 (Test if loadbalancer can handle concurrent connections from multiple clients (loadbalancer.N < sum(servers.N))) ... failure!
++++ First 200 characters of standard error for test asgn3.test.23 are: ++++
bash: line 16: 30645 Terminated              ./httpserver 8223 -L -e 10 -t 5000 &> /dev/null
bash: line 16: 30647 Terminated              ./httpserver 8323 -L -e 6 -t 4000 &> /dev/null
bash: line 16: 
++++ end ++++
---- Test feedback ----
Start 3 httpserver instances. One server has the least load (error count and total number of requests). Start the least loaded httpserver in a different working directory. The two other server instances have different loads. Create 30 small files, each with a different size in the directory of the least loaded server with a valid server side names. Start the loadbalancer (-R 4 -N 6). After that, send 30 GET requests, one for each of the files created to the load balancer. Run these commands in parallel using &, and save their output using the -o <output-file> option. Use the keyword wait so that the script waits for all commands running in the background (&) to finish. Verify that output files match the contents of the small files created.
---- end ----
--> Running asgn3.test.24 (Test if loadblancer can detect if all servers are up initially, and go down (500 error)) ... SUCCESS!
--> Running asgn3.test.25 (Test if loadbalancer can detect malformed healthcheck responses) ... SUCCESS!
--> Running asgn3.test.26 (Test if loadbalancer can forward traffic to a server that becomes the least loaded (external requests)) ... failure!
++++ First 200 characters of standard error for test asgn3.test.26 are: ++++
bash: line 26: 13274 Terminated              ./httpserver 8126 -L -e 6 -t 10 &> /dev/null
bash: line 26: 13275 Terminated              ./httpserver 8326 -L -e 6 -t 100 &> /dev/null
bash: line 26: 1605
++++ end ++++
---- Test feedback ----
Start 3 httpserver instances. Each server has a different load. The second least loaded server runs in a different working directory. Create a small text file in the directory of the second least loaded server. Start the loadbalancer (-R 1). Send a small request (HEAD) using curl to the loadbalalncer to trigger a healthcheck probe. After that, send 40 small requests (HEAD) directly to the least loaded server (not through the laodbalancer). The load counts should now shift and the second least loaded server now becomes the least loaded server. Send another small request (HEAD) using curl to trigger a second health check probe. Then send a GET request to the loadbalancer using curl for the specific file created earlier and save the output using the -o  option. Verify that the output file matches the text file that was created.
---- end ----
"
